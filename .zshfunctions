precmd()
{
    [[ -t 1 ]] || return
    case "$TERM" in
        *xterm*|rxvt|(dt|k|E|a)term*) print -Pn "\e]0;[%~] %m\a"    ;;
        screen(-bce|.linux)) print -Pn "\ek[%~]\e\\" && print -Pn "\e]0;[%~] %m (screen)\a" ;;
    esac
    # end of command
    echo -ne '\a'
}

preexec()
{
    [[ -t 1 ]] || return
    local cmd="$( echo "$1" | head -n1 | sed -r 's/^(sudo [^[:space:]]+|[^[:space:]]+).*/\1/' )"
    case "$TERM" in
        *xterm*|rxvt|(dt|k|E|a)term*) print -Pn "\e]0;<$cmd> [%~] %m\a" ;;
        screen(-bce|.linux)) print -Pn "\ek<$cmd> [%~]\e\\" && print -Pn "\e]0;<$cmd> [%~] %m (screen)\a" ;;
    esac
}

chpwd()
{
    if [[ -d .git ]]
    then
        git status
    elif [[ -d .svn ]]
    then
        svn status
    fi
}

try_source()
{
    local i
    for i
    do
        if [[ -f $i ]]
        then
            source "$i"
        fi
    done
}

reload()
{
    try_source ~/.zshenv
    if [[ -o login ]]
    then
        try_source ~/.zprofile
    fi
    try_source ~/.zshrc
    if [[ -o login ]]
    then
        try_source ~/.zlogin
    fi
    rehash
}

nrg2iso(){ dd bs=1k if="$1" of="$1.iso" skip=300 }

update-gentoo()
{
    local cmd='emerge -DuN world && emerge --depclean && revdep-rebuild && prelink -amR'
    if [[ $EUID = 0 ]]
    then
        sh -c "$cmd"
    else
        echo 'You are not root!'
        echo 'Trying to use sudo'
        sudo "$SHELL" -c "$cmd"
    fi
}

pac()
{
    if [ "$EUID" = "0" ]; then
        pacman "$@"
    else
        sudo pacman "$@"
    fi
}
pacu(){ pac -U "$@" }
pacn(){ pacman "$@" }
pacr(){ pac -R "$@" }
pacrs(){ pacr -s "$@" }
pacq(){ pacn -Q "$@" }
pacqo(){ pacq -o "$@" }
pacqs(){ pacq -s "$@" }
pacql(){ pacq -l "$@" }
pacqi(){ pacq -i "$@" }
pacs(){ pac --needed -S "$@" && reload }
pacsu(){ pacs -u "$@" }
pacsy(){ pacs -y "$@" }
pacsuy(){ pacsu -y "$@" }
pacss(){ pacn -Ss "$@" }
pacsuw() { pacsu --noconfirm -w "$@" }
pacsuwy() { pacsuw -y "$@" }

cdm(){ mkdir -p "$1" && cd "$1" }
cdu(){ cd .. }
cdr()
{
    local PPWD="$PWD"
    local CWD="${1:-..}"
    cd "${CWD}"
    rmdir "$PPWD" || cd "$PPWD"
}
cdt()
{
    cd "$(mktemp -d)"
}

mk_header()
{
    local FILE="$1"
    local OUTPUT="${2:-$(basename "$FILE")}"
    local GUARD="$(echo "$FILE" | tr '/.[[:lower:]]' '__[[:upper:]]')"
    if [[ -e $OUTPUT ]]
    then
        return 1
    fi
    printf "#ifndef ${GUARD}\n#define ${GUARD}\n\n" >"$OUTPUT"
    if [[ -n $3 ]]
    then
        cat "$3" >>"$OUTPUT"
    fi
    printf "\n#endif //${GUARD}\n" >>"$OUTPUT"
}

mk_class()
{
    for i
    do
        HEADER="$(echo "$i" | tr '[[:lower:]]' '[[:upper:]]')_HPP"
        printf "#ifndef ${HEADER}\n#define ${HEADER}\n\nclass $i\n{\n};\n\n#endif //${HEADER}\n" >"$i.hpp"
        echo "#include \"$i.hpp\"" >"$i.cpp"
    done
}

upfind()
{
    local path="$1"
    shift

    local OPWD="$PWD"
    while [[ ! -r $path && $PWD != "/" ]]
    do
        cd ..
    done
    if [[ -r $path ]]
    then
        "$@"
    else
        local NOT_FOUND=1
    fi
    cd "$OPWD"
    if [[ -n $NOT_FOUND ]]
    then
        printf "Unable to find \"%s\"\n" "$2"
    fi
}
updox(){ upfind Doxyfile doxygen "$@" }
upmake(){ upfind Makefile make "$@" }
upbmake(){ upfind build make -C build "$@" }

imgur()
{
    for i
    do
        curl -# -F "image"=@"$i" -F "key"="4907fcd89e761c6b07eeb8292d5a9b2a" http://imgur.com/api/upload.xml |
            grep -Eo '<[a-z_]+>http[^<]+'|sed 's/^<.\|_./\U&/g;s/_/ /;s/<\(.*\)>/\x1B[0;34m\1:\x1B[0m /'
    done
}

bgrandom()
{
    awsetbg -r ~/Pictures/wallpaper
}

vcat()
{
    local i
    for i
    do
        local lines="$(wc -l < "$i")"
        if (( lines <= 1 ))
        then
            echo "$i: $(cat "$i")"
        else
            echo "{{{[$i]"
            cat "$i"
            echo "}}}[$i]"
        fi
    done
}

git-version()
{
    echo $(git rev-list --count HEAD).$(git rev-parse --short HEAD)
}

yakuake-show()
{
    qdbus-qt4 org.kde.yakuake /yakuake/MainWindow_1 show
}

tm()
{
    local session="${1:-default}"
    tmux attach -t "$session" || (cd && command tmux new-session -s "$session")
}

tmc()
{
    local session="${1:-default}"
    tmux new -s "$session"
}

rtorrent-attach()
{
    tmux attach -t rt
}

git-push-to-all()
{
    git remote | parallel git push "{}"
}

git-force-push-to-all()
{
    local h="$(git log HEAD^..HEAD --pretty='%H')"
    local hs="$(git log HEAD^..HEAD --pretty='%h')"
    local h_
    echo -n "Enter hash to force push: "
    read h_
    if [[ $h_ != $h && $h_ != $hs ]]
    then
        echo "Hash mismatch" >&2
        return 1
    fi
    git remote | parallel git push -f "{}"
}

if [[ -f ~/.zshlocalfunctions ]]
then
    source ~/.zshlocalfunctions
fi
