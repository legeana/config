use std::path::Path;

use crate::package::contents::lexer;

use super::args::Arguments;
use super::ast;

grammar(location: &Path);

pub Manifest: ast::Manifest = {
    <StatementList> => ast::Manifest {
        location: location.to_owned(),
        statements: <>,
    },
};

StatementList: Vec<ast::Statement> = {
    <mut list:StatementList> <st:Statement> => {
        list.push(st);
        list
    },
    <StatementList> EmptyLine,
    <Statement> => vec![<>],
    EmptyLine => Vec::new(),
};

EmptyLine = {
    LineTerminator,
};

Statement: ast::Statement = {
    <Invocation> LineTerminator => ast::Statement::Command(<>),
    <IfStatement> LineTerminator => ast::Statement::IfStatement(<>),
};

Invocation: ast::Invocation = {
    <start:@L>
    <name:Literal>
    <args:(<Literal>)*> => ast::Invocation {
        location: start,
        name,
        args: Arguments(args),
    },
};

IfStatement: ast::IfStatement = {
    <start:@L>
    If
    <condition:Invocation>
    <statements:Block>
    <else_statements:ElseBlock?>
    => ast::IfStatement {
        location: start,
        condition,
        statements,
        else_statements: else_statements.unwrap_or_default(),
    },
};

Block = {
    Begin
    <StatementList>
    End
};

ElseBlock = {
    Else <Block>
};

LineTerminator = {
    Newline,
    EndOfInput,
};

extern {
    type Location = lexer::Location;
    type Error = lexer::LocationError;

    enum lexer::Token {
        EndOfInput => lexer::Token::EndOfInput,
        Newline => lexer::Token::Newline,
        Literal => lexer::Token::Literal(<String>),
        If => lexer::Token::If,
        Else => lexer::Token::Else,
        Begin => lexer::Token::Begin,
        End => lexer::Token::End,
    }
}
