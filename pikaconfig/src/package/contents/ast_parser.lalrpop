use std::path::Path;

use crate::package::contents::lexer;

use super::args;
use super::ast;

grammar(location: &Path);

pub Manifest: ast::Manifest = {
    <StatementList> => ast::Manifest {
        location: location.to_owned(),
        statements: <>,
    },
};

StatementList: Vec<ast::Statement> = {
    <mut list:StatementList> <st:Statement> => {
        list.push(st);
        list
    },
    <StatementList> EmptyLine,
    <Statement> => vec![<>],
    EmptyLine => Vec::new(),
};

EmptyLine = {
    LineTerminator,
};

Statement: ast::Statement = {
    <Invocation> LineTerminator => ast::Statement::Command(<>),
    <IfStatement> LineTerminator => ast::Statement::IfStatement(<>),
    <Assignment> LineTerminator => ast::Statement::Assignment(<>),
};

Invocation: ast::Invocation = {
    <start:@L>
    <name:UnquotedLiteral>
    <args:Arguments> => ast::Invocation {
        location: start,
        name,
        args,
    },
};

IfStatement: ast::IfStatement = {
    <start:@L>
    <if_clause:IfClause>
    <else_if_clauses:ElseIfClause*>
    <else_statements:ElseClause?>
    => ast::IfStatement {
        location: start,
        if_clause,
        else_if_clauses,
        else_statements: else_statements.unwrap_or_default(),
    },
};

Condition: ast::Condition = {
    <command:Invocation> => ast::Condition::Command(command),
};

IfClause: ast::IfClause = {
    <start:@L>
    If
    <condition:Condition>
    <statements:Block> => ast::IfClause {
        location: start,
        condition,
        statements,
    },
};

ElseIfClause = {
    Else <IfClause>,
};

ElseClause = {
    Else <Block>,
};

Block = {
    Begin
    <StatementList>
    End
};

Assignment: ast::Assignment = {
    <start:@L>
    <var:UnquotedLiteral>
    Assign
    <command:Invocation> => ast::Assignment {
        location: start,
        var,
        command,
    },
};

Arguments: args::Arguments = {
    <Argument*> => args::Arguments(<>),
};

Argument: args::Argument = {
    <SingleQuotedLiteral> => args::Argument::Raw(<>),
    <DoubleQuotedLiteral> => args::Argument::OnlyVars(<>),
    <UnquotedLiteral> => args::Argument::VarsAndHome(<>),
};

LineTerminator = {
    Newline,
    EndOfInput,
};

extern {
    type Location = lexer::Location;
    type Error = lexer::LocationError;

    enum lexer::Token {
        EndOfInput => lexer::Token::EndOfInput,
        Newline => lexer::Token::Newline,
        SingleQuotedLiteral => lexer::Token::SingleQuotedLiteral(<String>),
        DoubleQuotedLiteral => lexer::Token::DoubleQuotedLiteral(<String>),
        UnquotedLiteral => lexer::Token::UnquotedLiteral(<String>),
        If => lexer::Token::If,
        Else => lexer::Token::Else,
        Begin => lexer::Token::Begin,
        End => lexer::Token::End,
        Assign => lexer::Token::Assign,
    }
}
