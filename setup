#!/bin/bash -e

cd "$(dirname "$0")"
cfgroot="$PWD"
baseroot="$PWD/base"

# note: for backward compatibility entries should not be removed
# new file locations should be added to front
install_files=(
    "$cfgroot/.install"
)

current_install_file="${install_files[0]}"

function safeln {
    if [[ -e ${2:-Need to specify destination} ]]; then
        if [[ -h $2 ]]; then
            rm "$2"
        else
            echo "Unable to override: $2" >&2 && exit 1
        fi
    fi
    mkdir -p "$(dirname "$2")"
    ln -vs "$1" "$2"
}

function saferm {
    local i
    for i; do
        if [[ -h $i ]]; then
            rm -vf "$i"
        else
            echo "Unable to remove: $i" >&2 # not fatal
        fi
    done
}

function minstall {
    local base="$1"
    local manifest="$2"
    while read file; do
        safeln "$base/$file" "$HOME/$file"
        echo "$HOME/$file" >>"$current_install_file"
    done < "$manifest"
}

function uninstall {
    local f
    for f in "${install_files[@]}"; do
        if [[ -e $f ]]; then
            if [[ -f $f ]]; then
                while read line; do
                    if [[ -n $line ]]
                    then
                        saferm "$line"
                    fi
                done <"$f"
                rm -f "$f"
            else
                echo "Invalid file type: $f" >&2 && exit 1
            fi
        fi
    done
}

function update {
    cd "$cfgroot"
    echo "Updating $cfgroot" >&2
    old_master="$(cat .git/refs/heads/master)"
    git fetch
    if ! git pull --ff-only; then
        echo "Failed to update, manual intervention is required!" >&2
        exit 1
    fi
    new_master="$(cat .git/refs/heads/master)"
    if [[ $old_master != $new_master ]]; then
        echo "Found update: $old_master -> $new_master, restarting..." >&2
        exec "$cfgroot/setup" -d "$@"
    fi
}

skip_update=""
only_uninstall=""

while getopts "duh" arg; do
    case "$arg" in
        d) skip_update=1 ;;
        u) only_uninstall=1 ;;
        ?) printf "Usage: %s: [-u only uninstall]\n" "$0" 1>&2 && exit 1 ;;
    esac
done
shift "$((OPTIND - 1))"

if [[ -z $skip_update && -z $only_uninstall ]]; then
    update "$@"
fi

uninstall

if [[ -z $only_uninstall ]]; then
    minstall "$baseroot" "$baseroot/MANIFEST"
fi
