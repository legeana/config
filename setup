#!/bin/sh -e
USE_SETUP="${native}"

src_root() {
    cd "$(dirname "$0")"
    pwd
}

BOOTSTRAP=pikaconfig-bootstrap
BINARY=pikaconfig
ROOT="$(src_root)"
SRC="${ROOT?}"
BUILD="$SRC/target/release"
CACHED_BOOTSTRAP="$BUILD/$BOOTSTRAP"
CACHED_BINARY="$BUILD/$BINARY"

# Environment used by pikaconfig binary.
export PIKACONFIG_CONFIG_ROOT="$ROOT"

log() {
    echo "$@" >&2
}

log_eval() {
    log '$' "$@"
    "$@"
}

fatal() {
    log "$@"
    exit 1
}

load_cargo_env() {
    CARGO_ENV="${CARGO_HOME:-$HOME/.cargo}/env"
    if [ -f "$CARGO_ENV" ]; then
        log "Found $CARGO_ENV file, loading"
        . "$CARGO_ENV"
    fi
}

check_cargo() {
    cargo --version >/dev/null 2>&1
}

try_cargo_env() {
    load_cargo_env
    if check_cargo; then
        log "Using existing cargo"
        return
    fi
    return 1
}

try_rustup_cargo() {
    if rustup --version >/dev/null 2>&1; then
        log_eval rustup toolchain install stable
        # No need to load cargo environment as this is controlled by the OS.
    fi
    # Try OS environment first.
    if check_cargo; then
        return;
    fi
    # Try to load cargo environment in case we used user-installed rustup.
    load_cargo_env
    check_cargo
}

# Ensures rust is installed.
# Avoids package manager rust installations because they often don't have fresh
# enough rust toolchain.
get_rust() {
    # Try cargo directly first.
    if check_cargo; then
        log "Using existing cargo"
        return
    fi

    # Opportunistically try to find existing Cargo installation.
    if try_cargo_env; then
        return
    fi

    # Use system rustup if available.
    if try_rustup_cargo; then
        return
    fi

    # Fallback: install rustup from the web.
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s - --no-modify-path
    # Load environment from the newly installed Rust.
    load_cargo_env
}

native_setup() {
    get_rust
    cargo run \
        --manifest-path="$SRC/Cargo.toml" \
        --locked \
        --package="$BOOTSTRAP" \
        --release \
        -- "$@"
    cargo run \
        --manifest-path="$SRC/Cargo.toml" \
        --locked \
        --package="$BINARY" \
        --release \
        -- "$@"
}

cached_setup() {
    "$CACHED_BINARY" "$@"
}

docker_build() {
    log_eval $OPTIONAL_SUDO docker run \
        --pull=always \
        --volume="${SRC?}/cargo-registry:/usr/local/cargo/registry" \
        --volume="${SRC?}:/app" \
        --rm \
        --workdir=/app \
        rust:latest \
        cargo build \
        --locked \
        "$@"
}

docker_setup_base() {
    docker_build --package="$BOOTSTRAP" --release
    "$CACHED_BOOTSTRAP" "$@"
    docker_build --package="$BINARY" --release
    "$CACHED_BINARY" "$@"
}

docker_setup() {
    docker_setup_base "$@"
}

sudo_docker_setup() {
    OPTIONAL_SUDO=sudo
    docker_setup_base "$@"
}

# Supports methods such as native or docker.
# See <setup>_setup helpers.
USE_SETUP=native
case "$1" in
    cached|docker|sudo_docker)
        USE_SETUP="$1"
        shift
        ;;
esac

log Using "${USE_SETUP?}" setup
"${USE_SETUP?}_setup" "$@"
