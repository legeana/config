#!/bin/bash -e

cd "$(dirname "$0")"
cfgroot="$PWD"

# note: for backward compatibility entries should not be removed
# new file locations should be added to front
install_files=(
    "$cfgroot/.install"
)

current_install_file="${install_files[0]}"

prefix="$cfgroot"
suffix=""
while [[ $prefix != $HOME ]]
do
    suffix="$(basename "$prefix")"
    prefix="$(dirname "$prefix")"
done

safeln()
{
    if [[ -e ${2:-Need to specify destination} ]]
    then
        if [[ -h $2 ]]
        then
            rm "$2"
        else
            echo "Unable to override: $2" >&2 && exit 1
        fi
    fi
    ln -vs "$1" "$2"
}

saferm()
{
    local i
    for i
    do
        if [[ -h $i ]]
        then
            rm -vf "$i"
        else
            echo "Unable to remove: $i" >&2 # not fatal
        fi
    done
}

install()
{
    for i
    do
        local fname="$(basename "$i")"
        safeln "$i" "$HOME/$fname"
        echo "$fname" >>"$current_install_file"
    done
}

cinstall()
{
    for i
    do
        safeln "$cfgroot/$i" "$HOME/$i"
        echo "$HOME/$i" >>"$current_install_file"
    done
}

uninstall()
{
    local f
    for f in "${install_files[@]}"
    do
        if [[ -e $f ]]
        then
            if [[ -f $f ]]
            then
                while read line
                do
                    if [[ -n $line ]]
                    then
                        saferm "$line"
                    fi
                done <"$f"
                rm -f "$f"
            else
                echo "Invalid file type: $f" >&2 && exit 1
            fi
        fi
    done
}

update()
{
    cd "$cfgroot"
    echo "Updating $cfgroot" >&2
    old_master="$(cat .git/refs/heads/master)"
    git fetch
    if ! git pull --ff-only
    then
        echo "Failed to update, manual intervention is required!" >&2
        exit 1
    fi
    new_master="$(cat .git/refs/heads/master)"
    if [[ $old_master != $new_master ]]
    then
        echo "Found update: $old_master -> $new_master, restarting..." >&2
        exec "$cfgroot/setup" -d "$@"
    fi
}

cd "$prefix"

skip_update=""
only_uninstall=""

while getopts "duh" arg
do
    case "$arg" in
        d) skip_update=1 ;;
        u) only_uninstall=1 ;;
        ?) printf "Usage: %s: [-u only uninstall]\n" "$0" 1>&2 && exit 1 ;;
    esac
done
shift "$((OPTIND - 1))"

if [[ -z $skip_update ]]
then
    update
fi

uninstall

if [[ -z $only_uninstall ]]
then
    cinstall \
        bin \
        .clang-format \
        .config/fish/aliases \
        .config/fish/config.d \
        .config/fish/config.fish \
        .config/fish/functions \
        .config/htop \
        .config/mc \
        .config/sublime-text-3 \
        .config/user-dirs.dirs \
        .config/user-dirs.locale \
        .gdbinit \
        .gitconfig \
        .gitconfig-user \
        .mplayer \
        .parallel \
        .tmux.conf \
        .vimrc \
        .Xdefaults \
        .yaourtrc \

fi
