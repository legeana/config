#!/bin/bash -e

cd "$(dirname "$0")"
cfgroot="$PWD"
baseroot="$PWD/base"

# note: for backward compatibility entries should not be removed
# new file locations should be added to front
install_files=(
    "$cfgroot/.install"
)

current_install_file="${install_files[0]}"

function safeln {
    if [[ -e ${2:-Need to specify destination} ]]; then
        if [[ ! -h $2 ]]; then
            echo "Unable to override: $2" >&2
            return 1
        fi
        rm "$2"
    fi
    mkdir -p "$(dirname "$2")"
    ln -vs "$1" "$2"
}

function saferm {
    local i
    for i; do
        if [[ ! -h $i ]]; then
            echo "Unable to remove: $i" >&2
            continue
        fi
        rm -vf "$i"
    done
}

function installed {
    local file="$1"
    local line
    if [[ ! -f $current_install_file ]]; then
        return 1
    fi
    while read line; do
        if [[ $file = $line ]]; then
            return 0
        fi
    done < "$current_install_file"
    return 1
}

function install {
    local src="$1"
    local dst="$2"
    if installed "$dst"; then
        echo "Overwriting previously installed $dst" >&2
        saferm "$dst"
    fi
    if safeln "$src" "$dst"; then
        echo "$dst" >>"$current_install_file"
    fi
}

function minstall {
    local manifest="$1"
    local base="$(dirname "$manifest")"
    while read file; do
        install "$base/$file" "$HOME/$file"
    done < "$manifest"
}

function uninstall {
    local f
    for f in "${install_files[@]}"; do
        if [[ ! -e $f ]]; then
            continue
        fi
        if [[ ! -f $f ]]; then
            echo "Invalid file type: $f" >&2
            exit 1
        fi
        while read line; do
            if [[ -n $line ]]; then
                saferm "$line"
            fi
        done < <(tac "$f")
        rm -f "$f"
    done
}

function update {
    cd "$cfgroot"
    echo "Updating $cfgroot" >&2
    old_master="$(cat .git/refs/heads/master)"
    git fetch
    if ! git pull --ff-only; then
        echo "Failed to update, manual intervention is required!" >&2
        exit 1
    fi
    new_master="$(cat .git/refs/heads/master)"
    if [[ $old_master != $new_master ]]; then
        echo "Found update: $old_master -> $new_master, restarting..." >&2
        exec "$cfgroot/setup" -d "$@"
    fi
}

skip_update=""
only_uninstall=""

while getopts "duh" arg; do
    case "$arg" in
        d) skip_update=1 ;;
        u) only_uninstall=1 ;;
        ?) printf "Usage: %s: [-u only uninstall]\n" "$0" 1>&2 && exit 1 ;;
    esac
done
shift "$((OPTIND - 1))"

if [[ -z $skip_update && -z $only_uninstall ]]; then
    update "$@"
fi

uninstall
if [[ $only_uninstall ]]; then
    exit
fi

minstall "$baseroot/MANIFEST"
