#!/bin/sh -e

# Supports methods such as native or docker.
# See <setup>_setup helpers.
USE_SETUP="${PIKACONFIG_SETUP:-native}"

dispatch_setup_helper() {
    log Using "${USE_SETUP?}" setup
    "${USE_SETUP?}_setup" "$@"
}

src_root() {
    cd "$(dirname "$0")"
    pwd
}

BOOTSTRAP=pikaconfig-bootstrap
BINARY=pikaconfig
ROOT="$(src_root)"
SRC="${ROOT?}"
BUILD="$SRC/target/release"
CACHED_BOOTSTRAP="$BUILD/$BOOTSTRAP"
CACHED_BINARY="$BUILD/$BINARY"

# Environment used by pikaconfig binary.
export PIKACONFIG_CONFIG_ROOT="$ROOT"

log() {
    echo "$@" >&2
}

log_eval() {
    log '$' "$@"
    "$@"
}

fatal() {
    log "$@"
    exit 1
}

load_cargo_env() {
    if [[ -f "${CARGO_HOME:-$HOME/.cargo}/env" ]]; then
        source ~/.cargo/env
    fi
}

get_rust() {
    if cargo --version >/dev/null 2>&1; then
        log "Using existing cargo"
        return
    fi
    # Opportunistically try to find existing Cargo installation.
    load_cargo_env
    if cargo --version >/dev/null 2>&1; then
        log "Using existing cargo"
        return
    fi
    # Use https://rustup.rs/ as package managers often don't have new enough
    # rust toolchain.
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s - --no-modify-path
    # Load environment from the newly installed Rust.
    load_cargo_env
}

native_setup() {
    get_rust
    cargo run \
        --manifest-path="$SRC/Cargo.toml" \
        --package="$BOOTSTRAP" \
        --release \
        -- "$@"
    cargo run \
        --manifest-path="$SRC/Cargo.toml" \
        --package="$BINARY" \
        --release \
        -- "$@"
}

cached_setup() {
    "$CACHED_BINARY" "$@"
}

docker_build() {
    log_eval $OPTIONAL_SUDO docker run \
        --pull=always \
        --volume="${SRC?}/cargo-registry:/usr/local/cargo/registry" \
        --volume="${SRC?}:/app" \
        --rm \
        --workdir=/app \
        rust:latest \
        cargo build "$@"
}

docker_setup_base() {
    docker_build --package="$BOOTSTRAP" --release
    "$CACHED_BOOTSTRAP" "$@"
    docker_build --package="$BINARY" --release
    "$CACHED_BINARY" "$@"
}

docker_setup() {
    docker_setup_base "$@"
}

sudo_docker_setup() {
    OPTIONAL_SUDO=sudo
    docker_setup_base "$@"
}

dispatch_setup_helper "$@"
