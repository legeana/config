#!/bin/sh -e

# Supports methods such as native or docker.
# See <setup>_setup helpers.
USE_SETUP="${PIKACONFIG_SETUP:-native}"

dispatch_setup_helper() {
    log Using "${USE_SETUP?}" setup
    "${USE_SETUP?}_setup" "$@"
}

src_root() {
    cd "$(dirname "$0")"
    pwd
}

has_no_update_flag() {
    if [[ -n $PIKACONFIG_NO_UPDATE ]]; then
        return 0
    fi
    for arg; do
        case "$arg" in
            -d) return 0 ;;
            --no-update) return 0 ;;
            --) return 1 ;;
        esac
    done
    return 1
}

ROOT="$(src_root)"
SRC="${ROOT?}/pikaconfig"
CACHED_BINARY="$SRC/target/release/pikaconfig"

# Environment used by pikaconfig binary.
export PIKACONFIG_CONFIG_ROOT="$ROOT"
if has_no_update_flag "$@"; then
    export PIKACONFIG_NO_UPDATE=yes
fi

log() {
    echo "$@" >&2
}

log_eval() {
    log '$' "$@"
    "$@"
}

fatal() {
    log "$@"
    exit 1
}

get_rust() {
    if cargo --version >/dev/null 2>&1; then
        log "Using existing cargo"
        return
    fi
    # Use https://rustup.rs/ as package managers often don't have new enough
    # rust toolchain.
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
}

update_config_root() {
    if [[ -n "$PIKACONFIG_NO_UPDATE" ]]; then
        return
    fi
    git -C "${ROOT?}" pull --ff-only
}

native_setup() {
    get_rust
    update_config_root
    cargo run --manifest-path="${SRC?}/Cargo.toml" --release -- "$@"
}

cached_setup() {
    "$CACHED_BINARY" --no-update "$@"
}

base_docker_setup() {
    update_config_root
    mkdir -p "${SRC?}/target/release"
    log_eval $OPTIONAL_SUDO docker run \
        --pull=always \
        --volume="${SRC?}/cargo-registry:/usr/local/cargo/registry" \
        --volume="${SRC?}:/app" \
        --rm \
        --workdir=/app \
        rust:latest \
        cargo build --release
    "${SRC?}/target/release/pikaconfig" --no-update "$@"
}

docker_setup() {
    base_docker_setup "$@"
}

sudo_docker_setup() {
    OPTIONAL_SUDO=sudo
    base_docker_setup "$@"
}

dispatch_setup_helper "$@"
