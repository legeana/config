use std::sync::Arc;

use indoc::formatdoc;
use minijinja::{Environment, Value};

use crate::jinja::Context;

/// Usage:
/// # header("#")
fn header(ctx: &Context, prefix: &str) -> Value {
    let sep = if prefix.is_empty() { "" } else { " " };
    let header = formatdoc! {"
    Autogenerated. See
    {prefix}{sep}{source_file}
    ",
    prefix=prefix,
    source_file=ctx.source_file.to_string_lossy()}
    .trim_end()
    .to_owned();
    Value::from_safe_string(header)
}

pub(super) fn register(env: &mut Environment, ctx: &Arc<Context>) {
    let ctx = Arc::clone(ctx);
    env.add_function("header", move |prefix: &str| header(ctx.as_ref(), prefix));
}
