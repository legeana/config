#!/usr/bin/python3

import argparse
import os
import pathlib
import subprocess
import tempfile
from typing import Callable, Iterable, List
import urllib.parse
import urllib.request

from pika_ssh_sync import config
from pika_ssh_sync import gpgutil
from pika_ssh_sync import keysutil

_AUTO_TOKEN_PREFIX = 'auto-pika-ssh-sync::'


def make_token(name: str) -> str:
  return _AUTO_TOKEN_PREFIX + name


def make_ssh_keys(
    key: gpgutil.Key, token: str, ssh_exporter: Callable[[str], str]
) -> Iterable[str]:
  for subkey in key.subkeys:
    if 'a' not in subkey.capabilities:
      continue
    if subkey.bad():
      continue
    sshkey = ssh_exporter(subkey.fingerprint)
    yield '{sshkey} {token} {uids} {fp}\n'.format(
        sshkey=sshkey,
        token=token,
        uids=', '.join(map(lambda uid: uid.name, key.uids)),
        fp=subkey.fingerprint)


def export_keybase(
    authorized_keys: keysutil.AuthorizedKeys,
    cfg: config.KeybaseEntry) -> None:
  token = make_token(cfg.name)
  with tempfile.TemporaryDirectory() as tmpdir:
    gpg = gpgutil.GPG(gnupghome=tmpdir)
    pubkey = subprocess.check_output(['keybase', 'pgp', 'export'])
    gpg.import_keys(pubkey)
    sshkeys: List[str] = []
    for key in gpg.list_keys():
      sshkeys.extend(make_ssh_keys(key, token, gpg.export_ssh_key))
    authorized_keys.replace(keysutil.is_not_token(token), sshkeys)


def export_gpg(
    authorized_keys: keysutil.AuthorizedKeys,
    cfg: config.GPGKeyEntry) -> None:
  token = make_token(cfg.name)
  gpg = gpgutil.GPG()
  sshkeys: List[str] = []
  key = gpg.list_key(cfg.fingerprint)
  if key:
    sshkeys.extend(make_ssh_keys(key, token, gpg.export_ssh_key))
  authorized_keys.replace(keysutil.is_not_token(token), sshkeys)


def export_ultimate(
    authorized_keys: keysutil.AuthorizedKeys,
    cfg: config.GPGUltimateEntry) -> None:
  token = make_token(cfg.name)
  gpg = gpgutil.GPG()
  sshkeys: List[str] = []
  for key in gpg.list_keys():
    if 'u' in key.owner_trust:
      sshkeys.extend(make_ssh_keys(key, token, gpg.export_ssh_key))
  authorized_keys.replace(keysutil.is_not_token(token), sshkeys)


def export_keys_api(
    authorized_keys: keysutil.AuthorizedKeys,
    cfg: config.KeysAPIEntry) -> None:
  token = make_token(cfg.name)
  with urllib.request.urlopen(cfg.url, timeout=30) as f:
    keys = (key.strip() for key in f.read().decode('utf8').split('\n'))
  sshkeys = [f'{key} {token}' for key in keys if key]
  authorized_keys.replace(keysutil.is_not_token(token), sshkeys)


def try_do(f, *args, **kwargs):
  try:
    f(*args, **kwargs)
  except Exception as e:
    print('Unable to do', f.__name__)
    print(e)


def dispatch(entry: config.Entry, authorized_keys: keysutil.AuthorizedKeys) -> None:
  if isinstance(entry, config.KeysAPIEntry):
    try_do(export_keys_api, authorized_keys, entry)
  elif isinstance(entry, config.GPGKeyEntry):
    try_do(export_gpg, authorized_keys, entry)
  elif isinstance(entry, config.GPGUltimateEntry):
    try_do(export_ultimate, authorized_keys, entry)
  elif isinstance(entry, config.KeybaseEntry):
    try_do(export_keybase, authorized_keys, entry)
  else:
    raise ValueError(
        f'Unknown entry type {type(entry)} in [{entry.name}]: {entry}')


def main():
  parser = argparse.ArgumentParser(description='Pika SSH authorized_keys sync')
  parser.add_argument('--print', action='store_true',
                      help=('Print generated authorized_keys file '
                            'instead of saving'))
  args = parser.parse_args()
  authorized_keys = keysutil.AuthorizedKeys.load()
  cfg = config.Config.load()
  for entry in cfg.entries:
    dispatch(entry, authorized_keys)
  if cfg.entries:
    # only clean up old entries if the list is non-empty
    # in case the config file is corrupt or not found
    authorized_keys.filter(keysutil.is_tokens_except(
        tokens=(make_token(e.name) for e in cfg.entries),
        exception=_AUTO_TOKEN_PREFIX))
  if args.print:
    authorized_keys.print()
  else:
    authorized_keys.save()


if __name__ == '__main__':
  main()
